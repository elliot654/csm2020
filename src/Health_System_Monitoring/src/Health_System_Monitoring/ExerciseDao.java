package Health_System_Monitoring;

import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class ExerciseDao implements ExerciseDaoInterface {

    Connection databaseConnection;

    public ExerciseDao() {
        databaseConnection = database_driver.getConnection();
    }

    public int addNewRegime(ExerciseRegime regime)
    {
        //NULL CHECKER FOR THE  METHOD ARGUMENTS
        if(regime != null) {

            PreparedStatement sqlStatement = null;
            try {
                String query = "INSERT INTO exercise_regimes (patient_id, rd_id, start_date, end_date, frequency)" +
                        " values (?, ?, ?, ?, ?);";

                //create mysql prepared statement
                sqlStatement = databaseConnection.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);
                sqlStatement.setInt(1, regime.patientId);
                sqlStatement.setInt(2, regime.rdId);
                sqlStatement.setDate(3, regime.startDate);
                sqlStatement.setDate(4, regime.endDate);
                sqlStatement.setInt(5, regime.frequency);

                // resultSet contains autogenerated regime_id
                sqlStatement.executeUpdate();
                ResultSet resultSet = sqlStatement.getGeneratedKeys();

                if(resultSet.first())
                {
                    regime.regimeId = resultSet.getInt(1);
                    return regime.regimeId;
                }
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println(e.getMessage());

            } finally {
                if (sqlStatement != null) {
                    try {
                        sqlStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                //closeDbConnection();
            }
        }

        return -1;
    }

    public boolean updateRegime(ExerciseRegime regime)
    {
        //NULL CHECKER FOR THE  METHOD ARGUMENTS
        if(regime != null) {

            PreparedStatement sqlStatement = null;

            try {
                String query = "UPDATE exercise_regimes SET patient_id=?, rd_id=?, start_date=?, end_date=?, frequency=? WHERE regime_id=?";

                sqlStatement = databaseConnection.prepareStatement(query);

                sqlStatement.setInt(1,regime.patientId);
                sqlStatement.setInt(2, regime.rdId);
                sqlStatement.setDate(3, regime.startDate);
                sqlStatement.setDate(4, regime.endDate);
                sqlStatement.setInt(5, regime.frequency);
                sqlStatement.setInt(6, regime.regimeId);

                sqlStatement.executeUpdate();

                return true;

            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println(e.getMessage());

            } finally {
                if (sqlStatement != null) {
                    try {
                        sqlStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
//                closeDbConnection();
            }
        }
        return false;
    }

    public boolean removeRegime(ExerciseRegime regime)
    {

        return removeRegime(regime.regimeId);
    }

    public boolean removeRegime(int regimeId)
    {
        PreparedStatement sqlStatement = null;
        try {
            String query = "DELETE FROM exercise_regimes WHERE regime_id=?";

            sqlStatement = databaseConnection.prepareStatement(query);

            sqlStatement.setInt(1, regimeId);

            sqlStatement.executeUpdate();

            sqlStatement.close();

            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());

        }
        return false;
    }

    // basic getter

    public Collection<ExerciseRegime> getAllRegimesForPatient(int patientId)
    {
        List<ExerciseRegime> regimeList = new ArrayList<>();

        PreparedStatement sqlStatement = null;

        try {
            String query = "SELECT * FROM exercise_regimes WHERE patient_id=?";
            sqlStatement = databaseConnection.prepareStatement(query);

            sqlStatement.setInt(1,patientId);

            ResultSet resultSet = sqlStatement.executeQuery();

            while (resultSet.next()) {
                ExerciseRegime regime = new ExerciseRegime();
                regime.regimeId = resultSet.getInt("regime_id");
                regime.patientId = resultSet.getInt("patient_id");
                regime.rdId = resultSet.getInt("rd_id");
                regime.startDate = resultSet.getDate("start_date");
                regime.endDate = resultSet.getDate("end_date");
                regime.frequency = resultSet.getInt("frequency");
                regimeList.add(regime);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());

        } finally {
            if (sqlStatement != null) {
                try {
                    sqlStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            //closeDbConnection();
        }

        return regimeList;
    }

    // -----------------------------------------------------------------------------------

    // Trial Table Crud

    public int addNewTrial(ExerciseTrial trial)
    {
        //NULL CHECKER FOR THE  METHOD ARGUMENTS
        if(trial != null) {

            PreparedStatement sqlStatement = null;
            try {
                String query = "INSERT INTO exercise_trials (regime_id, type, duration, intensity_speed, intensity_slope)" +
                        " values (?, ?, ?, ?, ?);";

                //create mysql prepared statement
                sqlStatement = databaseConnection.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);
                sqlStatement.setInt(1, trial.regimeId);
                sqlStatement.setString(2, trial.type);
                sqlStatement.setInt(3, trial.duration);
                sqlStatement.setInt(4, trial.intensity_speed);
                sqlStatement.setBigDecimal(5, trial.intensity_slope);

                // resultSet contains autogenerated regime_id
                sqlStatement.executeUpdate();
                ResultSet resultSet = sqlStatement.getGeneratedKeys();

                if(resultSet.first())
                {
                    trial.trialId = resultSet.getInt(1);
                    return trial.trialId;
                }
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println(e.getMessage());

            } finally {
                if (sqlStatement != null) {
                    try {
                        sqlStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                //closeDbConnection();
            }
        }

        return -1;
    }

    public boolean updateTrial(ExerciseTrial trial)
    {
        //NULL CHECKER FOR THE  METHOD ARGUMENTS
        if(trial != null) {

            PreparedStatement sqlStatement = null;

            try {
                String query = "UPDATE exercise_trials SET regime_id=?, type=?, duration=?, intensity_speed=?, intensity_slope=? WHERE trial_id=?";

                sqlStatement = databaseConnection.prepareStatement(query);

                sqlStatement.setInt(1, trial.regimeId);
                sqlStatement.setString(2, trial.type);
                sqlStatement.setInt(3, trial.duration);
                sqlStatement.setInt(4, trial.intensity_speed);
                sqlStatement.setBigDecimal(5, trial.intensity_slope);
                sqlStatement.setInt(6, trial.trialId);

                sqlStatement.executeUpdate();

                return true;

            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println(e.getMessage());

            } finally {
                if (sqlStatement != null) {
                    try {
                        sqlStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
//                closeDbConnection();
            }
        }
        return false;
    }

    public boolean removeTrial(ExerciseTrial trial)
    {
        return removeTrial(trial.trialId);
    }
    public boolean removeTrial(int trialId)
    {
        PreparedStatement sqlStatement = null;
        try {
            String query = "DELETE FROM exercise_trials WHERE trial_id=?";

            sqlStatement = databaseConnection.prepareStatement(query);

            sqlStatement.setInt(1, trialId);

            sqlStatement.executeUpdate();

            sqlStatement.close();

            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());

        }
        return false;
    }

    // basic getter

    public Collection<ExerciseTrial> getAllTrialsForRegime(int regimeId)
    {
        List<ExerciseTrial> trialList = new ArrayList<>();

        PreparedStatement sqlStatement = null;

        try {
            String query = "SELECT * FROM exercise_trials WHERE regime_id=?";
            sqlStatement = databaseConnection.prepareStatement(query);

            sqlStatement.setInt(1,regimeId);

            ResultSet resultSet = sqlStatement.executeQuery();

            while (resultSet.next()) {
                ExerciseTrial trial = new ExerciseTrial();
                trial.trialId = resultSet.getInt("trial_id");
                trial.regimeId = resultSet.getInt("regime_id");
                trial.type = resultSet.getString("type");
                trial.duration = resultSet.getInt("duration");
                trial.intensity_slope = resultSet.getBigDecimal("intensity_slope");
                trial.intensity_speed = resultSet.getInt("intensity_speed");
                trialList.add(trial);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());

        } finally {
            if (sqlStatement != null) {
                try {
                    sqlStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            //closeDbConnection();
        }

        return trialList;
    }

    // -----------------------------------------------------------------------------------

    // Utility Functions

    public ExerciseRegime getAssignedRegimeForPatient(Patient patient) {
        List<ExerciseRegime> regimes = (List<ExerciseRegime>)getAllRegimesForPatient(patient.getPatientId());

        if(regimes.size() < 1)
        {
            return null;
        }

        ExerciseRegime output = regimes.get(0);
        output.trials = new ArrayList<ExerciseTrial>();

        List<ExerciseTrial> trials = (List<ExerciseTrial>)getAllTrialsForRegime(output.regimeId);

        output.trials.addAll(trials);

        return output;
    }

}
